tf <- num_vect < 1
print(tf)
tf
tf1 <- num_vect >= 6
num_vect >= 6
my_char <- c("My", "name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Cesar")
my_name
paste(my_name, collapse = " ")
paste("Hello","world!", sep = " ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lappy(unique_vals, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
q()
q()
library("swirl")
swirl()
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library("dplyr")
library(dplyr)
packageVerion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -5:-20)
-5:20
select(cran, -(5:20))
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country in "India")
filter(cran, r_version <= "3.0.2", country == "India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5, NA,10))
!is.na(c(3,5, NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(size, ip_id)
cran2 <- select(cran, size, ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10 )
mutate(cran3, correctsize = size - 1000 )
mutate(cran3, correctsize = size + 1000 )
mutate(cran3, correct_size = size + 1000 )
summarize(cran, avg_bytes = mean(size))
q()
rm(list=ls())
getwd()
library("swirl")
swirl()
library("dplyr")
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
submit()
print (tbl, pack_sum)
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
select(pack_sum)
top_counts(pack_sum)
?top_counts
top_counts
view(top_counts)
View(top_counts)
top_count_sorted <- arrange(desc(count))
top_count_sorted <- arrange(pack_sum, desc(count))
top_count_sorted <- arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_counts)
View(top_unique)
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
q()
library(Hmisc)
## Cut Ranks into 5 groups and store as factor variable
matchedData$Rank.Groups = cut2(matchedData$Rank, g = 5)
## Build a table of Income Groups across Rank Groups
table(matchedData$Income.Group, matchedData$Rank.Groups)
library("swirl")
swirl()
swirl()
library("lubridate")
swirl()
swirl()
remove.packages(lubridate)
install.packages("lubridate")
q()
library("swirl")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label =TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
dmy(192012)
ymd(192012)
ymd("192012")
ymd("1/9/2012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(dt1)
parse_hms(dt1)
hms(dt1)
hms(str(dt1))
hms(dt1)
info()
dmy_hms(dt1)
skip()
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = hour(), minutes = minute())
update(this_moment, hours = hour(date()), minutes = minute(date()))
skip()
q()
library("swirl")
swirl()
this_moment
nyc <-now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(hour=17, minute=34)
depart <- update(depart, hour=17, minute=34)
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tz="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17,2008")
last_time <- ymd("June 17,2008")
last_time <- mdy("June 17,2008", tz="Singapore")
last_time <- mdy('June 17,2008', tz='Singapore')
last_time <- mdy('June 17,2008', tz='Singapore')
skip()
last_time
new_interval(last_time, arrive)
how_long <- new_interval(last_time, arrive)
how_long <- new_interval(last_time, arrive)
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day -> today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label =TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("1989 May 17")
mdy("March 12,1975")
dmy("March 12,1975")
myd("March 12,1975")
mdy("March 12,1975")
skip()
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours=8, minutes=34, seconds=55)
update(this_moment, hours=10, minutes=16, seconds=0)
this_moment <- update(this_moment, hours=10, minutes=16, seconds=0)
this_moment
nyc <-now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours(17), minutes=(34))
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz("Asia/Hong_Kong")
arrive <- with_tz(arrive, tz="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
new_interval(last_time, arrive)
how_long <-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
setwd("~/GitHub/datasciencecoursera/RepData_PeerAssessment1")
library("steps")
load("steps")
source("steps")
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
source("steps.R")
steps()
library(sqldf)
